name: check
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches:
      - main
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true


jobs:
  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@V27
        with:
          extra_nix_config: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
      - name: Populate the nix store
        run: nix develop --command echo
      - name: cargo fmt
        run: nix develop --command cargo fmt --check
  check-dev-deps:
    name: Check dev-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@V27
        with:
          extra_nix_config: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
      - name: Populate the nix store
        run: nix develop --command echo
      - run: nix develop --command ./scripts/dev-deps.sh
      - run: cat dev-deps.txt
      - run: |
          if git diff --quiet -- dev-deps.txt; then
              echo "No changes in dev-deps"
          else
              echo "Changes in dev-deps detected:"
              echo "$(git diff -- dev-deps.txt)"
              exit 1
          fi
  clippy-nosim:
    name: clippy - nosim
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - id: git-info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: cachix/install-nix-action@V27
        with:
          extra_nix_config: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
      - name: Populate the nix store
        run: nix develop --command echo
      - name: Restore rust cache
        id: target-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            target
            /home/runner/.cargo
          key: ${{ github.job }}-${{ runner.os }}-${{ steps.git-info.outputs.branch }}-${{ hashFiles('Cargo.lock') }}-${{ steps.git-info.outputs.sha }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-${{ steps.git-info.outputs.branch }}-${{ hashFiles('Cargo.lock') }}-
            ${{ github.job }}-${{ runner.os }}-${{ steps.git-info.outputs.branch }}-
            ${{ github.job }}-${{ runner.os }}-
      - name: cargo clippy (nosim)
        run: nix develop --command cargo clippy --all-targets -- -D warnings
      - name: Save rust cache
        id: target-cache-save
        uses: actions/cache/save@v4
        with:
          path: |
            target
            /home/runner/.cargo
          key: ${{ steps.target-cache-restore.outputs.cache-primary-key }}
  clippy-madsim:
    name: clippy - madsim
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - id: git-info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: cachix/install-nix-action@V27
        with:
          extra_nix_config: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
      - name: Populate the nix store
        run: nix develop --command echo
      - name: Restore rust cache
        id: target-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            target
            /home/runner/.cargo
          key: ${{ github.job }}-${{ runner.os }}-${{ steps.git-info.outputs.branch }}-${{ hashFiles('Cargo.lock') }}-${{ steps.git-info.outputs.sha }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-${{ steps.git-info.outputs.branch }}-${{ hashFiles('Cargo.lock') }}-
            ${{ github.job }}-${{ runner.os }}-${{ steps.git-info.outputs.branch }}-
            ${{ github.job }}-${{ runner.os }}-
      - name: cargo clippy (madsim)
        run: nix develop --command cargo clippy --all-targets -- -D warnings
        env:
          RUSTFLAGS: "--cfg madsim"
      - name: Save rust cache
        id: target-cache-save
        uses: actions/cache/save@v4
        with:
          path: |
            target
            /home/runner/.cargo
          key: ${{ steps.target-cache-restore.outputs.cache-primary-key }}
