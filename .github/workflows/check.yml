name: check
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches:
      - main
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -xe {0}

jobs:
  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            extra-substituters = https://cache.garnix.io
            extra-trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}

      - name: Populate the nix store
        run: nix develop --command echo

      - name: cargo fmt
        run: nix develop --command cargo fmt --check

  check-dev-deps:
    name: Check dev-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            extra-substituters = https://cache.garnix.io
            extra-trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}

      - name: Populate the nix store
        run: nix develop --command echo

      - run: nix develop --command ./scripts/dev-deps.sh

      - run: cat dev-deps.txt

      - run: |
          if git diff --quiet -- dev-deps.txt; then
              echo "No changes in dev-deps"
          else
              echo "Changes in dev-deps detected:"
              echo "$(git diff -- dev-deps.txt)"
              exit 1
          fi
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            extra-substituters = https://cache.garnix.io
            extra-trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}

      - name: Populate the nix store
        run: nix develop --command echo

      - name: cargo clippy
        run: nix develop --command cargo clippy --workspace --all-targets -- -D warnings

  clippy-madsim:
    name: clippy - madsim
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            extra-substituters = https://cache.garnix.io
            extra-trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}

      - name: Populate the nix store
        run: nix develop --command echo

      - name: cargo clippy (madsim)
        run: nix develop --command cargo clippy --workspace --all-targets -- -D warnings
        env:
          RUSTFLAGS: "--cfg madsim"
