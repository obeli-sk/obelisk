name: release-3-upload-artifacts

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The ref (branch or SHA) to process"
        required: false
        type: string
  workflow_run:
    workflows:
      - release-2-cargo-publish
    types:
      - completed

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash -xe {0}

jobs:
  create-github-release:
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Use the ref if provided, otherwise obtain the parent workflow branch, defaults to main.
          ref: ${{ github.event.inputs.ref || github.event.workflow_run.head_branch }}

      - id: git-info
        run: |
          VERSION="$(grep -m1 '^version = "' Cargo.toml | cut -d'"' -f2)"
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          echo "Releasing $TAG $SHA"
          body=$(./scripts/extract-release-info.sh "$VERSION" | jq -R -s .)
          curl -v --fail -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d '{
              "tag_name": "'"$TAG"'",
              "target_commitish": "'"$SHA"'",
              "name": "obelisk-'"$TAG"'",
              "body": '"$body"',
              "draft": false,
              "prerelease": false
            }' \
            https://api.github.com/repos/obeli-sk/obelisk/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHA: ${{ steps.git-info.outputs.sha }}
          TAG: ${{ steps.git-info.outputs.tag }}
          VERSION: ${{ steps.git-info.outputs.version }}

  upload-assets:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-github-release
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04

          - target: x86_64-unknown-linux-musl
            os: ubuntu-24.04

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04

          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04

          - target: x86_64-apple-darwin
            os: ubuntu-24.04

          - target: aarch64-apple-darwin
            os: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          # Use the ref if provided, otherwise obtain the parent workflow branch, defaults to main.
          ref: ${{ github.event.inputs.ref || github.event.workflow_run.head_branch }}

      - id: git-info
        run: |
          VERSION="$(grep -m1 '^version = "' Cargo.toml | cut -d'"' -f2)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - id: release-info
        run: |
          curl --fail -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/obeli-sk/obelisk/releases/tags/$TAG > release.json
          RELEASE_ID=$(jq -r '.id' release.json)
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        env:
          TAG: ${{ steps.git-info.outputs.tag }}

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            extra-substituters = https://cache.garnix.io
            extra-trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g

      - name: Build Obelisk with Nix
        run: nix build '.#obeliskCross-${{ matrix.target }}'

      - name: Create a tar.gz archive
        run: tar czf archive.tar.gz --transform='s/^result\/bin\///' result/bin/obelisk

      - name: Upload the archive
        run: |
          curl -v --fail -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @archive.tar.gz \
            "https://uploads.github.com/repos/obeli-sk/obelisk/releases/${{ steps.release-info.outputs.release_id }}/assets?name=obelisk-${{ matrix.target }}.tar.gz"
