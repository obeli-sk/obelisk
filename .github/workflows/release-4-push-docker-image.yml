# TODO: Use flakes to generate the docker image

name: release-4-push-docker-image

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The ref (branch or SHA) to process"
        required: false
        type: string
      latest:
        description: "Tag with `latest` if $image == this value"
        required: false
        type: string
        default: ubuntu
  workflow_run:
    workflows:
      - release-3-upload-artifacts
    types:
      - completed

defaults:
  run:
    shell: bash -xe {0}

jobs:
  push-image:
    name: ${{ matrix.dockerfile }}
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - tarfile: obelisk-x86_64-unknown-linux-gnu.tar.gz
            dockerfile: ubuntu-24.04.Dockerfile
            image_tag: ubuntu
          - tarfile: obelisk-x86_64-unknown-linux-musl.tar.gz
            dockerfile: alpine.Dockerfile
            image_tag: alpine

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }} # Use the ref if provided, otherwise defaults to the current branch/commit

      - id: git-info
        run: |
          git fetch --tags
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
          echo "tag=$(git tag --contains HEAD)" >> $GITHUB_OUTPUT

      - run: |
          TAG="${{ steps.git-info.outputs.tag }}"
          if [ -z "$TAG" ]; then
            echo "No tag pointing at HEAD."
            exit 1
          fi
          VERSION="${TAG#v}"

          docker login -u getobelisk -p ${{ secrets.DOCKER_HUB_TOKEN }}
          mkdir tmp
          cd tmp
          wget -q https://github.com/obeli-sk/obelisk/releases/download/${TAG}/${{ matrix.tarfile }}
          tar xvfz ${{ matrix.tarfile }}
          cp ../obelisk.toml obelisk.toml
          IMAGE_BASE="getobelisk/obelisk"
          IMAGE="${IMAGE_BASE}:${{ matrix.image_tag }}"
          docker build --progress=plain -f ../.github/workflows/release/docker-image/${{ matrix.dockerfile }} . --tag $IMAGE
          docker push $IMAGE


          echo "Tagging with version ${VERSION}"
          IMAGE2="${IMAGE_BASE}:${VERSION}-${{ matrix.image_tag }}"
          echo "Tagging as $IMAGE2"
          docker tag $IMAGE $IMAGE2
          docker push $IMAGE2

          if [ "${{ github.event.inputs.latest }}" = "${{ matrix.image_tag }}" ]; then
            docker tag $IMAGE $IMAGE_BASE
            docker push $IMAGE_BASE
          fi
