[package]
name = "obelisk"
description = "Deterministic workflow engine"
readme = "README.md"

authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[dependencies]
concepts.workspace = true
db-sqlite.workspace = true
executor.workspace = true
val-json.workspace = true
wasm-workers.workspace = true

anyhow.workspace = true
assert_matches.workspace = true
async-trait.workspace = true
axum.workspace = true
cfg-if.workspace = true
chrono.workspace = true
clap.workspace = true
config.workspace = true
const_format.workspace = true
derive_more.workspace = true
directories.workspace = true
docker_credential.workspace = true
futures-util.workspace = true
hashbrown.workspace = true
http.workspace = true
itertools.workspace = true
oci-client.workspace = true
oci-wasm.workspace = true
prost-wkt-types.workspace = true
prost.workspace = true
serde_json.workspace = true
serde_with.workspace = true
serde.workspace = true
sha2.workspace = true
shadow-rs.workspace = true
strum.workspace = true
tempfile.workspace = true
thiserror.workspace = true
tokio = { workspace = true }
tokio-stream.workspace = true
toml.workspace = true
tonic = { workspace = true, default-features = true, features = [
    "zstd",
    "gzip",
    "tls",
    "tls-roots",
] }
tonic-web.workspace = true
tower-http.workspace = true
tower.workspace = true
tracing-appender.workspace = true
tracing-subscriber.workspace = true
tracing.workspace = true
utils.workspace = true
wasmtime.workspace = true

# Optional deps:
# otlp
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
opentelemetry-semantic-conventions = { workspace = true, optional = true }
tracing-opentelemetry.workspace = true
# tokio-console
console-subscriber = { workspace = true, optional = true }

[dev-dependencies]
tempfile.workspace = true
rstest.workspace = true

[[bin]]
name = "obelisk"
path = "src/main.rs"

[features]
tokio-console = ["dep:console-subscriber"]
otlp = [
    "dep:opentelemetry",
    "dep:opentelemetry_sdk",
    "dep:opentelemetry-otlp",
    "dep:opentelemetry-semantic-conventions",
]
default = ["otlp"]

[lints]
workspace = true

[build-dependencies]
tonic-build = { workspace = true, default-features = true }
shadow-rs.workspace = true

[workspace]
resolver = "2"
members = [
    "crates/concepts",
    "crates/db-mem",
    "crates/db-sqlite",
    "crates/executor",
    "crates/component-builder",
    "crates/testing/db-tests",
    "crates/testing/test-programs/fibo/activity",
    "crates/testing/test-programs/fibo/activity/builder",
    "crates/testing/test-programs/fibo/webhook",
    "crates/testing/test-programs/fibo/webhook/builder",
    "crates/testing/test-programs/fibo/workflow",
    "crates/testing/test-programs/fibo/workflow/builder",
    "crates/testing/test-programs/http/activity",
    "crates/testing/test-programs/http/activity/builder",
    "crates/testing/test-programs/http/workflow",
    "crates/testing/test-programs/http/workflow/builder",
    "crates/testing/test-programs/sleep/activity",
    "crates/testing/test-programs/sleep/activity/builder",
    "crates/testing/test-programs/sleep/workflow",
    "crates/testing/test-programs/sleep/workflow/builder",
    "crates/testing/test-utils",
    "crates/utils",
    "crates/val-json",
    "crates/wasm-workers",
    "crates/webui",
    "crates/webui/builder",
    "crates/webui-proxy",
]

[workspace.package]
version = "0.15.1"
license = "AGPL-3.0-only"
repository = "https://github.com/obeli-sk/obelisk"
authors = ["Project Developers"]
edition = "2021"
rust-version = "1.83.0"

[workspace.dependencies]
concepts = { package = "obeli-sk-concepts", path = "crates/concepts", version = "0.15.1" }
db-mem = { path = "crates/db-mem" }
db-sqlite = { package = "obeli-sk-db-sqlite", path = "crates/db-sqlite", version = "0.15.1" }
db-tests = { path = "crates/testing/db-tests" }
executor = { package = "obeli-sk-executor", path = "crates/executor", version = "0.15.1" }
obelisk-component-builder = { path = "crates/component-builder", features = [
    "genrs",
] }
test-programs-fibo-activity-builder = { path = "crates/testing/test-programs/fibo/activity/builder" }
test-programs-fibo-webhook-builder = { path = "crates/testing/test-programs/fibo/webhook/builder" }
test-programs-fibo-workflow-builder = { path = "crates/testing/test-programs/fibo/workflow/builder" }
test-programs-http-get-activity-builder = { path = "crates/testing/test-programs/http/activity/builder" }
test-programs-http-get-workflow-builder = { path = "crates/testing/test-programs/http/workflow/builder" }
test-programs-sleep-activity-builder = { path = "crates/testing/test-programs/sleep/activity/builder" }
test-programs-sleep-workflow-builder = { path = "crates/testing/test-programs/sleep/workflow/builder" }
test-utils = { path = "crates/testing/test-utils" }
utils = { package = "obeli-sk-utils", path = "crates/utils", version = "0.15.1" }
val-json = { package = "obeli-sk-val-json", path = "crates/val-json", version = "0.15.1" }
wasm-workers = { package = "obeli-sk-wasm-workers", path = "crates/wasm-workers", version = "0.15.1" }
webui-builder = { path = "crates/webui/builder" }

anyhow = { version = "1.0", features = ["backtrace"] }
axum = { version = "0.8.1", features = ["http2"] }
directories = "6.0"
arbitrary = { version = "1.4.1", features = ["derive"] }
assert_matches = "1.5.0"
async-channel = "2.3.1"
async-trait = "0.1"
bytes = "1.10"
cargo_metadata = "0.19"
cfg-if = "1.0.0"
chrono = { version = "0.4.39", features = ["arbitrary", "serde"] }
clap = { version = "4.5.29", features = ["derive"] }
config = { version = "0.15.8", default-features = false, features = [
    "toml",
    "preserve_order",
    "async",
    "convert-case",
] }
console-subscriber = "0.4.1"
const_format = "0.2.34"
criterion = "0.5"
derivative = "2.2.0"
derive_more = { version = "2.0.1", features = [
    "debug",
    "deref",
    "display",
    "from_str",
    "into",
] }
docker_credential = "1.3.1"
futures-util = "0.3.31"
futures = { version = "0.3.31", default-features = false }
fxhash = "0.2.1"
getrandom = "=0.2.11" # For madsim patch
hashbrown = { version = "0.15.2", features = ["serde"] }
hdrhistogram = "7.5.4"
http = "1.2.0"
http-body-util = "0.1"
hyper = "1.6.0"
hyper-util = { version = "0.1", features = ["tokio"] }
indexmap = { version = "2.7", features = ["serde"] }
insta = { version = "1.42.1", features = ["json"] }
itertools = "0.14"
lazy_static = "1.5"
madsim = "0.2.31"
oci-client = { version = "0.14.0", default-features = false, features = [
    "rustls-tls",
] }
oci-wasm = { version = "0.2.1", default-features = false, features = [ # Dependent on matching oci-client
    "rustls-tls",
] }
prost = "0.13.5"
prost-wkt-types = "0.6"
rand = "0.8"
reqwest = { version = "0.12", default-features = false, features = [
    "json",
    "rustls-tls",
] }
route-recognizer = "0.3.1"
rstest = "0.24"
rusqlite = { version = "0.33.0", features = [
    "bundled",
    "chrono",
    "serde_json",
] }
serde = { version = "1.0.217", features = ["derive"] }
serde_json = "1.0.138"
serde_with = "3.12.0"
sha2 = "0.10.8"
shadow-rs = "0.38"
strum = { version = "0.27.0", features = ["derive"] }
tempfile = "3.16.0"
thiserror = "2.0"
tokio = { version = "0.2.30", package = "madsim-tokio", features = [
    "fs",
    "macros",
    "rt-multi-thread",
    "rt",
    "signal",
    "sync",
    "time",
    "tracing",
] }
tokio-stream = "0.1.17"
toml = { version = "0.8.20", features = ["preserve_order"] }
tonic = { version = "0.12.3", default-features = false }
tonic-build = { version = "0.12.3", default-features = false }
tonic-web = "0.12.3"
tower = "0.5.2"
tower-http = { version = "0.6.2", features = ["trace", "cors"] }
tracing = { version = "0.1", features = ["log"] }
tracing-appender = "0.2.3"
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "json"] }
ulid = { version = "1.2.0", features = ["serde"] }
url = "2.5.4"
waki = "0.5.1"
waki-macros = "0.5.1"
wasm-logger = "0.2.0"
wiremock = "0.6"

# webui
id-arena = "2.2.1"
implicit-clone = "0.5.0"
log = "0.4.25"
semver = "1.0.25"
tonic-web-wasm-client = "0.6.1"
wasm-bindgen = "=0.2.100"                                                     # Must be equal to wasm-bindgen-cli in nix. Update Trunk.toml.
wasm-bindgen-futures = "=0.4.50"                                              # Must match https://github.com/rustwasm/wasm-bindgen/blob/$WASM_BINDGEN_VERSION/crates/futures/Cargo.toml
web-sys = "=0.3.77"                                                           # Must match https://github.com/rustwasm/wasm-bindgen/blob/$WASM_BINDGEN_VERSION/crates/web-sys/Cargo.toml
yew = { version = "0.21.0", features = ["csr"] }
yew_icons = { version = "0.8.0", features = ["LucideBox", "LucideFileDiff"] }
yew-router = "0.18.0"
yewprint = "0.5.0"
yewprint-css = "0.4.0"

# wasmtime
wasmtime = { version = "29.0.1", features = ["memory-protection-keys"] }
wasmtime-wasi = "29.0.1"
wasmtime-wasi-http = "29.0.1"
# wasm-tools
wast = "225.0.0"
wit-parser = "0.225.0"
wasmparser = "0.225.0"
wit-component = "0.225.0"

# testing components
wit-bindgen = "0.39.0"

# otlp
opentelemetry = "0.28.0"
opentelemetry_sdk = { version = "0.28.0", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "0.28.0", features = [
    "tls",
    "tls-roots",
    "grpc-tonic",
] }
opentelemetry-semantic-conventions = "0.28.0"
tracing-opentelemetry = "0.29"

[patch.crates-io]
getrandom = { git = "https://github.com/madsim-rs/getrandom.git", rev = "e79a7aecbcf8a43a802d30742667b77d75c613bd" } # madsim

[workspace.lints]
# lower the priority to allow overriding later
clippy.all = { level = "deny", priority = -1 }
# lower the priority to allow overriding later
clippy.dbg_macro = "deny"
# lower the priority to allow overriding later
clippy.pedantic = { level = "deny", priority = -1 }
# lower the priority to allow overriding later
clippy.explicit_deref_methods = "allow" # Lots of false positives.
# lower the priority to allow overriding later
clippy.missing_errors_doc = "allow" # Allow missing docs for now
# lower the priority to allow overriding later
clippy.missing_panics_doc = "allow" # Allow missing docs for now
# lower the priority to allow overriding later
clippy.trivially_copy_pass_by_ref = "allow" # Lots of false positives.
# lower the priority to allow overriding later
clippy.module_name_repetitions = "allow"
# Vec::from_iter is more readable than collect::<Vec<_>>
clippy.from_iter_instead_of_collect = "allow"
# Happy path should be first no matter the condition.
clippy.if_not_else = "allow"

[workspace.lints.rust]
unexpected_cfgs = { level = "deny", check-cfg = ['cfg(madsim)'] }
unknown_lints = "deny"

[profile.release]
overflow-checks = true
lto = true
opt-level = "s"

[profile.release_trunk]
inherits = "release"
strip = "symbols"

[package.metadata.binstall]
pkg-url = "{ repo }/releases/download/v{ version }/obelisk-{ target }.tar.gz"
pkg-fmt = "tgz"
