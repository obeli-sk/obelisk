[package]
name = "obeli-sk"
description = "Deterministic workflow engine"
readme = "README.md"

authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[dependencies]
concepts.workspace = true
db-sqlite.workspace = true
executor.workspace = true
val-json.workspace = true
wasm-workers.workspace = true

anyhow.workspace = true
assert_matches.workspace = true
async-trait.workspace = true
cfg-if.workspace = true
chrono.workspace = true
clap.workspace = true
config.workspace = true
const_format.workspace = true
directories.workspace = true
docker_credential.workspace = true
futures-util.workspace = true
hashbrown.workspace = true
oci-distribution = { workspace = true }
oci-wasm = { workspace = true }
prost-wkt-types.workspace = true
prost.workspace = true
serde_json.workspace = true
serde_with.workspace = true
serde.workspace = true
sha2.workspace = true
shadow-rs.workspace = true
strum.workspace = true
tempfile.workspace = true
thiserror.workspace = true
tokio = { workspace = true }
tokio-stream.workspace = true
toml.workspace = true
tonic.workspace = true
tracing-appender.workspace = true
tracing-subscriber.workspace = true
tracing.workspace = true
utils.workspace = true
wasmtime.workspace = true

# Optional deps:
# otlp
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
opentelemetry-semantic-conventions = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }
# tokio-console
console-subscriber = { workspace = true, optional = true }
# tracing-chrome
tracing-chrome = { workspace = true, optional = true }


[[bin]]
name = "obelisk"
path = "src/main.rs"

[features]
parallel-compilation = ["wasmtime/parallel-compilation"]
tokio-console = ["dep:console-subscriber"]
otlp = [
    "dep:opentelemetry",
    "dep:opentelemetry_sdk",
    "dep:opentelemetry-otlp",
    "dep:opentelemetry-semantic-conventions",
    "dep:tracing-opentelemetry",
]
tracing-chrome = ["dep:tracing-chrome"]
default = ["parallel-compilation", "otlp"]

[lints]
workspace = true

[build-dependencies]
prost-build.workspace = true
tonic-build.workspace = true
shadow-rs.workspace = true

[workspace]
resolver = "2"
members = [
    "crates/concepts",
    "crates/db-sqlite",
    "crates/db-mem",
    "crates/executor",
    "crates/testing/cargo-component-builder",
    "crates/testing/db-tests",
    "crates/testing/test-programs/fibo/activity",
    "crates/testing/test-programs/fibo/activity/builder",
    "crates/testing/test-programs/fibo/workflow",
    "crates/testing/test-programs/fibo/workflow/builder",
    "crates/testing/test-programs/http/activity",
    "crates/testing/test-programs/http/activity/builder",
    "crates/testing/test-programs/http/workflow",
    "crates/testing/test-programs/http/workflow/builder",
    "crates/testing/test-programs/sleep/activity",
    "crates/testing/test-programs/sleep/activity/builder",
    "crates/testing/test-programs/sleep/workflow",
    "crates/testing/test-programs/sleep/workflow/builder",
    "crates/testing/test-utils",
    "crates/utils",
    "crates/val-json",
    "crates/wasm-workers",
]

[workspace.package]
version = "0.2.2"
license = "AGPL-3.0-only"
repository = "https://github.com/obeli-sk/obelisk"
authors = ["Project Developers"]
edition = "2021"
rust-version = "1.77.0"

[workspace.dependencies]
cargo-component-builder = { path = "crates/testing/cargo-component-builder" }
concepts = { package = "obeli-sk-concepts", path = "crates/concepts", version = "0.2.2" }
db-mem = { path = "crates/db-mem" }
db-tests = { path = "crates/testing/db-tests" }
db-sqlite = { package = "obeli-sk-db-sqlite", path = "crates/db-sqlite", version = "0.2.2" }
executor = { package = "obeli-sk-executor", path = "crates/executor", version = "0.2.2" }
test-programs-fibo-activity-builder = { path = "crates/testing/test-programs/fibo/activity/builder" }
test-programs-fibo-workflow-builder = { path = "crates/testing/test-programs/fibo/workflow/builder" }
test-programs-http-get-activity-builder = { path = "crates/testing/test-programs/http/activity/builder" }
test-programs-http-get-workflow-builder = { path = "crates/testing/test-programs/http/workflow/builder" }
test-programs-sleep-activity-builder = { path = "crates/testing/test-programs/sleep/activity/builder" }
test-programs-sleep-workflow-builder = { path = "crates/testing/test-programs/sleep/workflow/builder" }
test-utils = { path = "crates/testing/test-utils" }
utils = { package = "obeli-sk-utils", path = "crates/utils", version = "0.2.2" }
val-json = { package = "obeli-sk-val-json", path = "crates/val-json", version = "0.2.2" }
wasm-workers = { package = "obeli-sk-wasm-workers", path = "crates/wasm-workers", version = "0.2.2" }

anyhow = { version = "1.0", features = ["backtrace"] }
directories = "5.0"
arbitrary = { version = "1.3.2", features = ["derive"] }
assert_matches = "1.5.0"
async-channel = "2.3.1"
async-sqlite = { package = "obeli-sk-deps-async-sqlite", version = "0.1.0", features = [
    "serde_json",
    "chrono",
    "tracing",
] }
async-trait = "0.1"
cargo_metadata = "0.18"
cfg-if = "1.0.0"
chrono = { version = "0.4.38", features = ["arbitrary", "serde"] }
clap = { version = "4.5.16", features = ["derive"] }
config = { version = "0.14.0", default-features = false, features = [
    "toml",
    "preserve_order",
    "async",
    "convert-case",
] }
console-subscriber = "0.4.0"
const_format = "0.2.32"
criterion = "0.5"
derivative = "2.2.0"
derive_more = "0.99.18"
docker_credential = "1.3.1"
futures-util = "0.3.30"
getrandom = "=0.2.11" # For madsim patch
hashbrown = { version = "0.14.5", features = ["serde"] }
http-body-util = "0.1"
hyper = "1.4.1"
hyper-util = "0.1"
indexmap = { version = "2.4", features = ["serde"] }
insta = { version = "1.39.0", features = ["json"] }
itertools = "0.13"
lazy_static = "1.5"
madsim = "0.2.30"
oci-distribution = { version = "0.11.0", default-features = false, features = [
    "rustls-tls",
] }
oci-wasm = { version = "0.0.4", default-features = false, features = [
    "rustls-tls",
] }
prost = "0.13.1"
prost-build = "0.13"
prost-wkt-types = "0.6"
rand = "0.8.5"
rusqlite = { version = "0.31.0" }
rstest = "0.22"
serde = { version = "1.0.209", features = ["derive"] }
serde_json = "1.0.127"
serde_with = "3.9.0"
sha2 = "0.10.8"
shadow-rs = "0.31"
strum = { version = "0.26.3", features = ["derive"] }
tempfile = "3.12.0"
thiserror = "1.0"
tokio = { version = "0.2.29", package = "madsim-tokio", features = [
    "fs",
    "macros",
    "rt-multi-thread",
    "rt",
    "signal",
    "sync",
    "time",
    "tracing",
] }
tokio-stream = "0.1.15"
toml = { version = "0.8.19", features = ["preserve_order"] }
tonic = { version = "0.12.2", features = ["zstd", "gzip", "tls", "tls-roots"] }
tonic-build = "0.12.2"
tracing = { version = "0.1", features = ["log"] }
tracing-appender = "0.2.3"
tracing-chrome = "0.7.2"
tracing-subscriber = { version = "0.3.18", features = ["env-filter", "json"] }
ulid = { version = "1.1.3", features = ["serde"] }
waki = "0.3.1"
wiremock = "0.6"

# wasmtime
wasmtime = { version = "23.0.2", default-features = false, features = [
    # remove "parallel-compilation"
    "addr2line",
    "async",
    "cache",
    "component-model",
    "component-model",
    "coredump",
    "cranelift",
    "debug-builtins",
    "demangle",
    "gc",
    "memory-protection-keys",
    "pooling-allocator",
    "profiling",
    "wat",
] }
wasmtime-wasi = "23.0.2"
wasmtime-wasi-http = "23.0.2"
wast = "212.0.0"
wit-parser = "0.212.0"

# cargo-component
wit-bindgen-rt = "0.24.0"

# otlp
opentelemetry = "0.23.0"
opentelemetry_sdk = { version = "0.23.0", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "0.16.0", features = ["tls", "tls-roots"] }
opentelemetry-semantic-conventions = "0.16.0"
tracing-opentelemetry = "0.24"

[patch.crates-io]
getrandom = { git = "https://github.com/madsim-rs/getrandom.git", rev = "e79a7aecbcf8a43a802d30742667b77d75c613bd" } # madsim

[workspace.lints]
# lower the priority to allow overriding later
clippy.all = { level = "deny", priority = -1 }
# lower the priority to allow overriding later
clippy.dbg_macro = "deny"
# lower the priority to allow overriding later
clippy.pedantic = { level = "deny", priority = -1 }
# lower the priority to allow overriding later
clippy.explicit_deref_methods = "allow" # Lots of false positives.
# lower the priority to allow overriding later
clippy.missing_errors_doc = "allow" # Allow missing docs for now
# lower the priority to allow overriding later
clippy.missing_panics_doc = "allow" # Allow missing docs for now
# lower the priority to allow overriding later
clippy.trivially_copy_pass_by_ref = "allow" # Lots of false positives.
# Move nested functions closer to where they are used.
clippy.module_name_repetitions = "allow"

[workspace.lints.rust]
unexpected_cfgs = { level = "deny", check-cfg = ['cfg(madsim)'] }
unknown_lints = "deny"

[profile.dev]
debug = 0

[profile.release]
overflow-checks = true
lto = true

[package.metadata.binstall]
pkg-url = "{ repo }/releases/download/v{ version }/obelisk-{ target }.tar.gz"
pkg-fmt = "tgz"
