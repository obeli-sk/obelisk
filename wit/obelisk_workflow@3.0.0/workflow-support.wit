package obelisk:workflow@3.0.0;

@since(version = 3.0.0)
interface workflow-support {
    use obelisk:types/time@3.0.0.{schedule-at, datetime};
    use obelisk:types/execution@3.0.0.{join-set, delay-id, execution-id, response-id};

    /// The closing strategy of a join set. Join sets are closed when execution finishes.
    @since(version = 3.0.0)
    enum closing-strategy {
        /// All submitted child execution requests that were not awaited by the workflow are awaited during join set close.
        /// Delay requests are not awaited.
        complete,

        // All submitted executions that were not awaited are cancelled.
        // TODO: Implement cancel
    }

    /// Error variants that may occur on named join set creation.
    @since(version = 3.0.0)
    variant join-set-create-error {
        conflict,
        invalid-name(string),
    }

    /// Returns a random u64 in the range [min, max).
    @since(version = 3.0.0)
    random-u64: func(min: u64, max-exclusive: u64) -> u64;
    /// Returns a random u64 in the range [min, max].
    @since(version = 3.0.0)
    random-u64-inclusive: func(min: u64, max-inclusive: u64) -> u64;

    /// Returns a random string with a length in the range [min_length, max_length).
    /// The string consists only of alphanumeric characters (lowercase and uppercase letters, digits).
    @since(version = 3.0.0)
    random-string: func(min-length: u16, max-length-exclusive: u16) -> string;

    /// Block execution for given time, return `schedule-at` resolved to time when the execution is scheduled.
    @since(version = 3.0.0)
    sleep: func(schedule-at: schedule-at) -> datetime;

    /// Submit a delay request to the join set. The delay can be later polled using `join-next`.
    @since(version = 3.0.0)
    submit-delay: func(join-set: borrow<join-set>, timeout: schedule-at) -> delay-id;

    /// Create a new completing join set.
    @since(version = 3.0.0)
    new-join-set-named: func(name: string, closing-strategy: closing-strategy) -> result<join-set, join-set-create-error>;

    /// Create a new completing join set with a generated name.
    @since(version = 3.0.0)
    new-join-set-generated: func(closing-strategy: closing-strategy) -> join-set;

    /// Error variants that may occur when calling `join-next` function.
    @since(version = 3.0.0)
    variant join-next-error {
        /// All submitted requests and their responses were already processed.
        all-processed,
    }

    /// Explicitly close join set. All executions that were submitted and not awaited,
    /// in other words executions with unprocessed responses, will be either
    /// awaited or cancelled based on `closing-strategy`.
    /// Extension function `-get` can be used to lookup the execution result.
    @since(version = 3.0.0)
    close: func(join-set: join-set);

    /// Block the workflow execution until next response associated with the join set arrives.
    /// The response is marked as processed.
    /// Child execution result can be obtained using `-get` extension function using the
    /// returned execution ID.
    /// Return `join-next-error::all-processed` if the join set has all requests matched with responses.
    @since(version = 3.0.0)
    join-next: func(join-set: borrow<join-set>) -> result<response-id, join-next-error>;
}
