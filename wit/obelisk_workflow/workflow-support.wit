package obelisk:workflow@1.0.0;

interface workflow-support {
    use obelisk:types/time@1.0.0.{duration};
    use obelisk:types/execution@1.0.0.{join-set-id};

    /// Returns a random u64 in the range [min, max).
    random-u64: func(min: u64, max-exclusive: u64) -> u64;
    /// Returns a random u64 in the range [min, max].
    random-u64-inclusive: func(min: u64, max-inclusive: u64) -> u64;

    /// Returns a random string with a length in the range [min_length, max_length).
    /// The string consists only of alphanumeric characters (lowercase and uppercase letters, digits).
    random-string: func(min-length: u16, max-length-exclusive: u16) -> string;

    /// Persistent sleep.
    sleep: func(duration: duration);
    // TODO: sleep-submit

    /// Create a new completing join set.
    new-join-set-named: func(name: string) -> join-set-id;

    /// Create a new completing join set with a generated name.
    new-join-set-generated: func() -> join-set-id;

    // TODO: `new-join-set-cancelling(name: string)` that cancels all child executions that are not awaited.
}
