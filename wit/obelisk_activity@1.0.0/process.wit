package obelisk:activity@1.0.0;

interface process {
    use wasi:io/streams@0.2.3.{input-stream, output-stream};

    // How to handle standard I/O for the spawned process
    enum stdio {
        pipe,    // Create a new pipe for communication
        discard, // Send to /dev/null or equivalent
    }

    // Configuration for spawning a process
    record spawn-options {
        // Arguments to pass to the command
        args: list<string>,

        // Environment variables to set for the spawned process.
        environment: list<tuple<string, string>>, // list of (key, value)

        // Current working directory for the spawned process.
        // If `none`, defaults to the guest's preopened working directory as configured by `activities.directories.parent_directory`.
        current-working-directory: option<string>,

        // How to handle the standard input of the spawned process.
        stdin: stdio,

        // How to handle the standard output of the spawned process.
        stdout: stdio,

        // How to handle the standard error of the spawned process.
        stderr: stdio,
    }

    // Potential errors during spawning or process management
    enum spawn-error {
        // The specified command was not found.
        command-not-found,
        // The host denied permission to spawn the process or access resources.
        permission-denied,
        // The current working directory specified does not exist or is not accessible.
        cwd-not-found,
        // A generic error occurred during spawning.
        generic-error,
    }

    enum process-error {
        // An OS-level error occurred while interacting with the process.
        os-error,
        // Permission was denied during a process operation (e.g. killing a process)
        permission-denied,
        // A generic internal error occurred in the host.
        internal-error,
    }

    // Represents a handle to a spawned child process
    resource child-process {
        // Returns a unique identifier for the process (e.g., PID).
        // This is host-defined but should be unique for concurrently running processes
        // spawned by this interface.
        id: func() -> u32;

        // If stdin was set to `pipe`, this returns the stream to write to it.
        // Returns `none` if stdin is not piped or if called multiple times (stream moved).
        take-stdin: func() -> option<output-stream>;

        // If stdout was set to `pipe`, this returns the stream to read from it.
        // Returns `none` if stdout is not piped or if called multiple times.
        take-stdout: func() -> option<input-stream>;

        // If stderr was set to `pipe`, this returns the stream to read from it.
        // Returns `none` if stderr is not piped or if called multiple times.
        take-stderr: func() -> option<input-stream>;

        // Waits for the process to exit and returns its exit code.
        // This is a blocking call.
        // Returns:
        //  - ok(some(s32)): The exit code of the process.
        //  - ok(none): E.g. if the process was terminated by a signal.
        //  - error(process-error): If waiting failed or process terminated abnormally (e.g. by signal).
        wait: func() -> result<option<s32>, process-error>;

        // Attempts to terminate the process.
        // The exact behavior (e.g., signal used) is host-dependent.
        // Returns `ok` if the request to terminate was successfully sent,
        // `error` otherwise. Does not guarantee the process has exited.
        kill: func() -> result<_, process-error>;
    }

    // Spawns a new process.
    //
    // - `command`: The executable to run (e.g., "/usr/bin/ls", "my_script.sh").
    // - `options`: Configuration for the spawned process.
    //
    // Returns a handle to the `child-process` on success, or a `spawn-error`.
    spawn: func(
        command: string,
        options: spawn-options
    ) -> result<child-process, spawn-error>;

}
