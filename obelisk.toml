### Supported path prefixes:
## | Prefix       | Default path            | Details
## | ${DATA_DIR}  |  ~/.local/share/obelisk | https://docs.rs/directories/5.0.1/directories/struct.ProjectDirs.html#method.data_dir
## | ${CACHE_DIR} |  ~/.cache/obelisk       | https://docs.rs/directories/5.0.1/directories/struct.ProjectDirs.html#method.cache_dir
## | ${CONFIG_DIR}|  ~/.config/obelisk      | https://docs.rs/directories/5.0.1/directories/struct.ProjectDirs.html#method.config_dir

## Server configuration
api.listening_addr = "127.0.0.1:5005"   # Address and port on which the API server will listen.
webui.listening_addr = "127.0.0.1:8080" # Address and port on which the webui will listen.

# sqlite.file = "${DATA_DIR}/obelisk.sqlite" # Path to sqlite database. Supports path prefixes.

# wasm_cache_directory = "${CACHE_DIR}/wasm" # Path to directory where downloaded or transformed WASM files are stored. Supports path prefixes.

# [codegen_cache]
## Defaults:
# enabled = true
# directory = "${CACHE_DIR}/codegen" # Path to directory where generated code is cached. Supports path prefixes.

### WASM Component configuration
## Common settings for all components
# name = "name" # Each component must be named.
## Location can be a file path or an OCI registry reference.
# location.path = "path/to/wasm"
# location.oci = "docker.io/repo/image:tag"
# content_digest = "sha256:AA.." # Optional. If specified, the WASM file must have a matching hash.

## Common executor settings
# exec.batch_size = 5 # Number of executions to lock for every event loop tick.
# exec.lock_expiry.secs = 1 # Each execution is locked for 1s by default.
# exec.tick_sleep.millis = 200 # Sleep between event loop ticks.
# exec.max_inflight_instances = "unlimited" # If set to an integer, limits the number of inflight instances.

### WASM Activity components configuration
# [[activity_wasm]]
## Common settings for all components - see above.
## Common executor settings - see above.
## Specific settings for activity_wasm:
## Retry customization: All activities are retried on trap (panic) and timeouts until `max_retries` condition is met.
# max_retries = 5
# retry_exp_backoff.millis = 100 # First retry is scheduled after 100ms after the failure, the next one after 200ms, then after 400ms...
# retry_on_err = true # When a function with a return type `result` returns the `Err` variant, attept to retry the execution.
## Guest std stream forwarding to host: one of "stdout","stderr","none". Default is "none".
# forward_stdout="stderr" # forwards stdout to host's stderr
# forward_stderr="stderr" # forwards stderr to host's stderr
## Environment variables: Set to a specific value or forward from the host. Default is empty.
# env_vars = ["ENV1", "ENV2=somevalue"]

### Workflow components configuration
# [[workflow]]
## Common settings for all components - see above.
## Common executor settings - see above.
## Retry customization: All workflows are retried on trap (panic) and timeouts forever. Therefore, `retry_exp_backoff` must not be zero.
# retry_exp_backoff.millis = 100 # First retry is scheduled after 100ms after the failure, the next one after 200ms, then after 400ms...
## Joining strategy: When workflow requests a child execution result, it can either be interrupted, or kept in the memory.
## When "interrupt" is selected, after every child execution result the whole event history must be replayed.
# join_next_blocking_strategy = "await" # Default strategy is "await"
# non_blocking_event_batching = 100 # Number of non-blocking events that can be cached and written in a batch.
# retry_on_trap = false # If set to true, traps(panics) will be handled as temporary failures and retried until the problem goes away.
# convert_core_module = true # Transparently convert Core WASM modules to WASM Components during startup.

### Webhook Endpoint section
# [[http_server]]
# name = "external"
# listening_addr = "0.0.0.0:9000"
# max_inflight_requests = "unlimited" # If set to an integer, limits the number of inflight requests
#
# [[webhook_endpoint]]
## Common settings for all components - see above.
# http_server = "external" # link to a `http_server`'s name
### Routes section
## An array of routes that will be matched against incoming requests.
## Only the path portion of a URL is taken into cosideration, the query part
## ("?param_name=value") is ignored by the matcher.
## Syntax of a route:
## "/path"                                      # All methods are matched, URL path must be exactly '/path'.
## "/path/*"                                    # All methods are matched, URL path must start with '/path/'.
## { methods = ["GET"], route = "/some/path" }  # Method must be GET and path '/some/path'.
## "/status/:param1/:param2"                    # When URL matches, `param1` and `param2` values will be exposed as env vars.
## ""                                           # Matches every possible URL, same as `/*`
## For details about the matching engine please see https://docs.rs/route-recognizer/latest/route_recognizer/
# routes = [{ methods = [ "GET" ], route = "/some"}, "/other"]
## Guest std stream forwarding to host: one of "stdout","stderr","none". Default is "none".
# forward_stdout="stderr" # forwards stdout to host's stderr
# forward_stderr="stderr" # forwards stderr to host's stderr
## Environment variables: Set to a specific value or forward from the host. Default is empty.
# env_vars = ["ENV1", "ENV2=somevalue"]

[[http_server]]
name = "external_webhook"
listening_addr = "127.0.0.1:9090"

[[activity_wasm]]
name = "fibo_activity"
location.oci = "docker.io/getobelisk/example_activity_fibo:2024-11-28@sha256:4b06ecdae0f7c018093c51137f9b11c6aba70c9fbf09957b89be4b441ece256f"
max_retries = 0

[[workflow]]
name = "fibo_workflow"
location.oci = "docker.io/getobelisk/example_workflow_fibo:2024-11-28@sha256:840166bccfb84a510c9298eef6fdfd577029ff33324ebcc5727844d1d9bc9a23"
exec.lock_expiry.secs = 2

[[webhook_endpoint]]
name = "webhook_fibo"
location.oci = "docker.io/getobelisk/example_webhook_fibo:2024-11-28@sha256:fb169550e3e8d485f1abd5c078e00da77a8ff9b4f61e30e2502dcd3ba925092b"
http_server = "external_webhook"
routes = [{ methods = ["GET"], route = "/fibo/:N/:ITERATIONS" }]

[[activity_wasm]]
name = "http_get_activity"
location.oci = "docker.io/getobelisk/example_activity_http_get:2024-11-28@sha256:ff531a5ce723842ccf70e414fbcff5bc75fe2eb241eed16fc53e6530f72e63a3"
forward_stdout = "stderr"
forward_stderr = "stderr"

[[workflow]]
name = "http_get_workflow"
location.oci = "docker.io/getobelisk/example_workflow_http_get:2024-11-28@sha256:5d4f31406d9e276c5f5c74010a098f76c3fd30828cd0a16de39c48b358ce1026"

[[activity_wasm]]
name = "sleep_activity"
location.oci = "docker.io/getobelisk/example_activity_sleep:2024-11-28@sha256:9f9861f5e53bdb870f047cd701874401cc88588c875b0da53176a81bd16750a5"
exec.lock_expiry.secs = 10

[[workflow]]
name = "sleep_workflow"
location.oci = "docker.io/getobelisk/example_workflow_sleep:2024-11-28@sha256:48c52c28f2eb10dc83013b3d1d6dc8847fd9166549f59a2242dee9ffd9d53e5f"

## Send spans via gRPC to an OTLP collector.
# [otlp] # Run `docker run --rm -it  -p 4317:4317 -p 16686:16686 jaegertracing/all-in-one:1.60` to start collecting traces.
# enabled = true
## Defaults:
# level = "info,app=trace"
# service_name = "obelisk-server"
# otlp_endpoint = "http://localhost:4317"

# Stdout configuration, by default logs INFO and above.
[log.stdout]
enabled = true
## Defaults:
# level = "info,app=trace"
# style = "plain_compact" # One of "plain","plain_compact","json"
# span = "none" # One of "none","new","enter","exit","close","active","full"
# target = false

## Sample (rolling) file configuration
# [log.file]
# enabled = true
# level = "info,obeli=debug,app=trace"
# style = "json"
# span = "close"
# target = true
# rotation = "daily"
# directory = "."
# prefix = "obelisk_server_daily"
