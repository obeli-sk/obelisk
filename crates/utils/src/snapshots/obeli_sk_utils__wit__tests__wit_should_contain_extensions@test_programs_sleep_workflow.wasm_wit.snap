---
source: crates/utils/src/wit.rs
expression: wit
---
package root:component;

world root {
  import obelisk:types/time@2.0.0;
  import obelisk:types/execution@2.0.0;
  import obelisk:workflow/workflow-support@2.0.0;
  import testing:sleep-obelisk-ext/sleep;
  import testing:sleep-workflow-obelisk-ext/workflow;
  import testing:sleep/sleep;

  export testing:sleep-workflow/workflow;
}
package obelisk:types@2.0.0 {
  interface time {
    variant duration {
      milliseconds(u64),
      seconds(u64),
      minutes(u32),
      hours(u32),
      days(u32),
    }

    /// A time and date in seconds plus nanoseconds.
    /// Extracted from wasi:clocks@0.2.0 to avoid dependency on wasi:io
    record datetime {
      seconds: u64,
      nanoseconds: u32,
    }

    variant schedule-at {
      now,
      at(datetime),
      in(duration),
    }
  }
  interface execution {
    resource join-set-id {
      id: func() -> string;
    }

    record execution-id {
      id: string,
    }

    record delay-id {
      id: string,
    }

    record execution-failed {
      execution-id: execution-id,
    }

    record function-mismatch {
      execution-id: execution-id,
    }

    variant execution-error {
      execution-failed(execution-failed),
      /// Mismatch between extension function (-await-next, -get) and the actual execution result.
      /// This can happen when join set contains responses of multiple functions or delay requests.
      function-mismatch(function-mismatch),
    }

    /// Error that is thrown by `-get` extension functions.
    variant get-extension-error {
      /// Execution is found in processed responses, but it finished with an error.
      execution-failed(execution-failed),
      /// Execution is found in processed responses, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions.
      function-mismatch(function-mismatch),
      /// Processed responses does not contain the provided execution ID.
      /// This can happen if the execution was not awaited, or the execution ID does not belong
      /// to the provided join set.
      not-found-in-processed-responses,
    }

    variant stub-error {
      /// Conflict can happen when a second writer attempts to stub a value, while the
      /// value is not equal to the already stubbed value.
      conflict,
    }
  }
}


package obelisk:workflow@2.0.0 {
  interface workflow-support {
    use obelisk:types/time@2.0.0.{schedule-at};
    use obelisk:types/execution@2.0.0.{join-set-id};

    enum closing-strategy {
      complete,
    }

    random-u64-inclusive: func(min: u64, max-inclusive: u64) -> u64;

    sleep: func(schedule-at: schedule-at);

    new-join-set-generated: func(closing-strategy: closing-strategy) -> join-set-id;
  }
}


package testing:sleep-obelisk-ext {
  interface sleep {
    use obelisk:types/execution@2.0.0.{join-set-id};
    use obelisk:types/time@2.0.0.{duration};
    use obelisk:types/execution@2.0.0.{execution-id};

    sleep-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;
  }
}


package testing:sleep-workflow-obelisk-ext {
  interface workflow {
    use testing:sleep-workflow/workflow.{execution-id};
    use obelisk:types/execution@2.0.0.{join-set-id};
    use testing:sleep-workflow/workflow.{schedule-at};
    use obelisk:types/execution@2.0.0.{execution-error};
    use testing:sleep-workflow/workflow.{duration};

    sleep-host-activity-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;

    sleep-host-activity-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, execution-error>;

    sleep-host-activity-schedule: func(schedule-at: schedule-at, duration: duration) -> execution-id;

    sleep-schedule-at-submit: func(join-set-id: borrow<join-set-id>, schedule-at: schedule-at) -> execution-id;

    sleep-schedule-at-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, execution-error>;

    sleep-schedule-at-schedule: func(schedule-at-a: schedule-at, schedule-at: schedule-at) -> execution-id;

    sleep-activity-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;

    sleep-activity-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, execution-error>;

    sleep-activity-schedule: func(schedule-at: schedule-at, duration: duration) -> execution-id;

    sleep-activity-submit-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;

    sleep-activity-submit-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, execution-id>, execution-error>;

    sleep-activity-submit-schedule: func(schedule-at: schedule-at, duration: duration) -> execution-id;

    reschedule-submit: func(join-set-id: borrow<join-set-id>, duration: duration, iterations: u8) -> execution-id;

    reschedule-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, execution-error>;

    reschedule-schedule: func(schedule-at: schedule-at, duration: duration, iterations: u8) -> execution-id;

    sleep-random-submit: func(join-set-id: borrow<join-set-id>, min-millis: u64, max-millis-inclusive: u64) -> execution-id;

    sleep-random-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, execution-error>;

    sleep-random-schedule: func(schedule-at: schedule-at, min-millis: u64, max-millis-inclusive: u64) -> execution-id;
  }
}


package testing:sleep {
  interface sleep {
    use obelisk:types/time@2.0.0.{duration};

    sleep: func(duration: duration);
  }
}


package testing:sleep-workflow {
  interface workflow {
    use obelisk:types/time@2.0.0.{duration, schedule-at};
    use obelisk:types/execution@2.0.0.{execution-id};

    sleep-host-activity: func(duration: duration);

    sleep-schedule-at: func(schedule-at: schedule-at);

    sleep-activity: func(duration: duration);

    sleep-activity-submit: func(duration: duration) -> execution-id;

    reschedule: func(duration: duration, iterations: u8);

    sleep-random: func(min-millis: u64, max-millis-inclusive: u64);
  }
}
