---
source: crates/utils/src/wit.rs
expression: wit
---
package root:component;

world root {
  import obelisk:types/time@2.0.0;
  import obelisk:types/execution@2.0.0;
  import obelisk:workflow/workflow-support@2.0.0;
  import testing:sleep/sleep;
  import testing:sleep-obelisk-ext/sleep;
  import testing:sleep-workflow/workflow;
  import testing:sleep-workflow-obelisk-schedule/workflow;

  export testing:sleep-workflow/workflow;
  export testing:sleep-workflow-obelisk-ext/workflow;
  export testing:sleep-workflow-obelisk-schedule/workflow;
}
package obelisk:types@2.0.0 {
  interface time {
    variant duration {
      milliseconds(u64),
      seconds(u64),
      minutes(u32),
      hours(u32),
      days(u32),
    }

    /// A time and date in seconds plus nanoseconds.
    /// Extracted from wasi:clocks@0.2.0 to avoid dependency on wasi:io
    record datetime {
      seconds: u64,
      nanoseconds: u32,
    }

    variant schedule-at {
      now,
      at(datetime),
      in(duration),
    }
  }
  interface execution {
    resource join-set-id {
      id: func() -> string;
    }

    record execution-id {
      id: string,
    }

    record delay-id {
      id: string,
    }

    record execution-failed {
      execution-id: execution-id,
    }

    record function {
      /// `namespace:pkg_name/ifc_name` or `namespace:pkg_name/ifc_name@version`
      interface-name: string,
      function-name: string,
    }

    variant response-id {
      execution-id(execution-id),
      delay-id(delay-id),
    }

    record function-mismatch {
      /// Workflow requested function
      specified-function: function,
      /// What was found actually during execution. None if delay was found as next unprocessed response.
      actual-function: option<function>,
      actual-id: response-id,
    }

    /// Error that is thrown by `-await-next` extension functions.
    variant await-next-extension-error {
      /// Execution response was awaited and marked as processed, but it finished with an error.
      execution-failed(execution-failed),
      /// All submitted requests and their responses of specified function and join set were already processed.
      all-processed,
      /// Execution response was awaited and marked as processed, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions or delay requests.
      function-mismatch(function-mismatch),
    }

    /// Error that is thrown by `-get` extension functions.
    variant get-extension-error {
      /// Execution is found in processed responses, but it finished with an error.
      execution-failed(execution-failed),
      /// Execution is found in processed responses, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions.
      function-mismatch(function-mismatch),
      /// Processed responses do not contain the specified execution ID.
      /// This can happen if the execution was not marked as processed (awaited), or
      /// the execution ID does not belong to the specified join set.
      not-found-in-processed-responses,
    }

    variant stub-error {
      /// Conflict can happen when a second writer attempts to stub a value, while the
      /// value is not equal to the already stubbed value.
      conflict,
    }
  }
}


package obelisk:workflow@2.0.0 {
  interface workflow-support {
    use obelisk:types/time@2.0.0.{schedule-at};
    use obelisk:types/execution@2.0.0.{join-set-id, delay-id, response-id};

    variant join-next-error {
      all-processed,
    }

    enum closing-strategy {
      complete,
    }

    random-u64-inclusive: func(min: u64, max-inclusive: u64) -> u64;

    sleep: func(schedule-at: schedule-at);

    submit-delay: func(join-set-id: borrow<join-set-id>, timeout: schedule-at) -> delay-id;

    new-join-set-generated: func(closing-strategy: closing-strategy) -> join-set-id;

    join-next: func(join-set-id: borrow<join-set-id>) -> result<response-id, join-next-error>;
  }
}


package testing:sleep {
  interface sleep {
    use obelisk:types/time@2.0.0.{duration};

    sleep: func(duration: duration);
  }
}


package testing:sleep-obelisk-ext {
  interface sleep {
    use obelisk:types/execution@2.0.0.{join-set-id};
    use testing:sleep/sleep.{duration};
    use obelisk:types/execution@2.0.0.{execution-id};

    sleep-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;
  }
}


package testing:sleep-workflow {
  interface workflow {
    use obelisk:types/time@2.0.0.{schedule-at, duration};
    use obelisk:types/execution@2.0.0.{execution-id};

    sleep-host-activity: func(duration: duration);

    sleep-schedule-at: func(schedule-at: schedule-at);

    sleep-activity: func(duration: duration);

    sleep-activity-submit: func(duration: duration) -> execution-id;

    reschedule: func(duration: duration, iterations: u8);

    sleep-random: func(min-millis: u64, max-millis-inclusive: u64);

    two-delays-in-same-join-set: func();

    join-next-produces-all-processed-error: func();
  }
}


package testing:sleep-workflow-obelisk-schedule {
  interface workflow {
    use obelisk:types/time@2.0.0.{schedule-at, duration};
    use obelisk:types/execution@2.0.0.{execution-id};

    sleep-host-activity-schedule: func(schedule-at: schedule-at, duration: duration) -> execution-id;

    sleep-schedule-at-schedule: func(schedule-at-a: schedule-at, schedule-at: schedule-at) -> execution-id;

    sleep-activity-schedule: func(schedule-at: schedule-at, duration: duration) -> execution-id;

    sleep-activity-submit-schedule: func(schedule-at: schedule-at, duration: duration) -> execution-id;

    reschedule-schedule: func(schedule-at: schedule-at, duration: duration, iterations: u8) -> execution-id;

    sleep-random-schedule: func(schedule-at: schedule-at, min-millis: u64, max-millis-inclusive: u64) -> execution-id;

    two-delays-in-same-join-set-schedule: func(schedule-at: schedule-at) -> execution-id;

    join-next-produces-all-processed-error-schedule: func(schedule-at: schedule-at) -> execution-id;
  }
}


package testing:sleep-workflow-obelisk-ext {
  interface workflow {
    use obelisk:types/time@2.0.0.{schedule-at, duration};
    use obelisk:types/execution@2.0.0.{execution-id, join-set-id, await-next-extension-error, get-extension-error, execution-failed};

    sleep-host-activity-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;

    sleep-host-activity-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    sleep-host-activity-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    sleep-host-activity-invoke: func(duration: duration) -> result<_, execution-failed>;

    sleep-schedule-at-submit: func(join-set-id: borrow<join-set-id>, schedule-at: schedule-at) -> execution-id;

    sleep-schedule-at-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    sleep-schedule-at-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    sleep-schedule-at-invoke: func(schedule-at: schedule-at) -> result<_, execution-failed>;

    sleep-activity-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;

    sleep-activity-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    sleep-activity-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    sleep-activity-invoke: func(duration: duration) -> result<_, execution-failed>;

    sleep-activity-submit-submit: func(join-set-id: borrow<join-set-id>, duration: duration) -> execution-id;

    sleep-activity-submit-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, execution-id>, await-next-extension-error>;

    sleep-activity-submit-get: func(execution-id: execution-id) -> result<execution-id, get-extension-error>;

    sleep-activity-submit-invoke: func(duration: duration) -> result<execution-id, execution-failed>;

    reschedule-submit: func(join-set-id: borrow<join-set-id>, duration: duration, iterations: u8) -> execution-id;

    reschedule-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    reschedule-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    reschedule-invoke: func(duration: duration, iterations: u8) -> result<_, execution-failed>;

    sleep-random-submit: func(join-set-id: borrow<join-set-id>, min-millis: u64, max-millis-inclusive: u64) -> execution-id;

    sleep-random-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    sleep-random-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    sleep-random-invoke: func(min-millis: u64, max-millis-inclusive: u64) -> result<_, execution-failed>;

    two-delays-in-same-join-set-submit: func(join-set-id: borrow<join-set-id>) -> execution-id;

    two-delays-in-same-join-set-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    two-delays-in-same-join-set-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    two-delays-in-same-join-set-invoke: func() -> result<_, execution-failed>;

    join-next-produces-all-processed-error-submit: func(join-set-id: borrow<join-set-id>) -> execution-id;

    join-next-produces-all-processed-error-await-next: func(join-set-id: borrow<join-set-id>) -> result<execution-id, await-next-extension-error>;

    join-next-produces-all-processed-error-get: func(execution-id: execution-id) -> result<_, get-extension-error>;

    join-next-produces-all-processed-error-invoke: func() -> result<_, execution-failed>;
  }
}
