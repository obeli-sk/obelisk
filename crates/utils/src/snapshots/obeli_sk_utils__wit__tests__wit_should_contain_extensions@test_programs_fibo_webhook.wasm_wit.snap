---
source: crates/utils/src/wit.rs
expression: wit
---
package root:component;

world root {
  import obelisk:log/log@1.0.0;
  import testing:fibo-workflow/workflow;
  import obelisk:types/execution@3.0.0;
  import obelisk:types/time@3.0.0;
  import testing:fibo-workflow-obelisk-schedule/workflow;
  import wasi:io/poll@0.2.6;
  import wasi:io/error@0.2.6;
  import wasi:io/streams@0.2.6;
  import wasi:http/types@0.2.4;
  import wasi:cli/environment@0.2.6;
  import wasi:cli/exit@0.2.6;
  import wasi:cli/stdout@0.2.6;
  import wasi:cli/stderr@0.2.6;
  import wasi:random/insecure-seed@0.2.6;

  export wasi:http/incoming-handler@0.2.2;
}
package obelisk:log@1.0.0 {
  interface log {
    info: func(message: string);
  }
}


package obelisk:types@3.0.0 {
  @since(version = 3.0.0)
  interface time {
    @since(version = 3.0.0)
    variant duration {
      milliseconds(u64),
      seconds(u64),
      minutes(u32),
      hours(u32),
      days(u32),
    }

    /// A time and date in seconds plus nanoseconds.
    /// Extracted from wasi:clocks@0.2.0 to avoid dependency on wasi:io
    @since(version = 3.0.0)
    record datetime {
      seconds: u64,
      nanoseconds: u32,
    }

    @since(version = 3.0.0)
    variant schedule-at {
      now,
      at(datetime),
      in(duration),
    }
  }
  @since(version = 3.0.0)
  interface execution {
    /// Join set resouce.
    @since(version = 3.0.0)
    resource join-set {
      @since(version = 3.0.0)
      id: func() -> string;
    }

    @since(version = 3.0.0)
    record execution-id {
      id: string,
    }

    @since(version = 3.0.0)
    record delay-id {
      id: string,
    }

    @since(version = 3.0.0)
    record function {
      /// `namespace:pkg_name/ifc_name` or `namespace:pkg_name/ifc_name@version`
      interface-name: string,
      function-name: string,
    }

    @since(version = 3.0.0)
    variant response-id {
      execution-id(execution-id),
      delay-id(delay-id),
    }

    @since(version = 3.0.0)
    record function-mismatch {
      /// Workflow requested function
      specified-function: function,
      /// What was found actually during execution. None if delay was found as next unprocessed response.
      actual-function: option<function>,
      actual-id: response-id,
    }

    /// Error that is thrown by `-await-next` extension functions.
    @since(version = 3.0.0)
    variant await-next-extension-error {
      /// All submitted requests and their responses of specified function and join set were already processed.
      all-processed,
      /// Execution response was awaited and marked as processed, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions or delay requests.
      function-mismatch(function-mismatch),
    }

    /// Error variants that may occur when calling `-get` extension functions.
    @since(version = 3.0.0)
    variant get-extension-error {
      /// Execution is found in processed responses, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions.
      function-mismatch(function-mismatch),
      /// Processed responses do not contain the specified execution ID.
      /// This can happen if the execution was not marked as processed (awaited), or
      /// the execution ID does not belong to the specified join set.
      not-found-in-processed-responses,
    }

    /// Error variants that may occur when calling `-invoke` extension functions.
    @since(version = 3.0.0)
    variant invoke-extension-error {
      invalid-name(string),
    }

    /// Error variants that may occur when calling `-stub` extension functions.
    @since(version = 3.0.0)
    variant stub-error {
      /// Conflict can happen when a second writer attempts to stub a value, while the
      /// value is not equal to the already stubbed value.
      conflict,
    }
  }
}


package testing:fibo-workflow {
  interface workflow {
    fiboa: func(n: u8, iterations: u32) -> result<u64>;
  }
}


package testing:fibo-workflow-obelisk-schedule {
  interface workflow {
    use obelisk:types/time@3.0.0.{schedule-at};
    use obelisk:types/execution@3.0.0.{execution-id};

    fiboa-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;
  }
}


package wasi:io@0.2.6 {
  interface poll {
    resource pollable {
      block: func();
    }
  }
  interface error {
    resource error {
      to-debug-string: func() -> string;
    }
  }
  interface streams {
    use error.{error};
    use poll.{pollable};

    resource input-stream {
      blocking-read: func(len: u64) -> result<list<u8>, stream-error>;
    }

    variant stream-error {
      last-operation-failed(error),
      closed,
    }

    resource output-stream {
      check-write: func() -> result<u64, stream-error>;
      write: func(contents: list<u8>) -> result<_, stream-error>;
      blocking-write-and-flush: func(contents: list<u8>) -> result<_, stream-error>;
      flush: func() -> result<_, stream-error>;
      subscribe: func() -> pollable;
    }
  }
}


package wasi:http@0.2.4 {
  interface types {
    use wasi:io/streams@0.2.6.{input-stream, output-stream};

    resource incoming-body {
      %stream: func() -> result<input-stream>;
    }

    resource incoming-request {
      method: func() -> method;
      path-with-query: func() -> option<string>;
      scheme: func() -> option<scheme>;
      authority: func() -> option<string>;
      headers: func() -> headers;
      consume: func() -> result<incoming-body>;
    }

    variant method {
      get,
      head,
      post,
      put,
      delete,
      connect,
      options,
      trace,
      patch,
      other(string),
    }

    variant scheme {
      HTTP,
      HTTPS,
      other(string),
    }

    resource fields {
      from-list: static func(entries: list<tuple<field-name, field-value>>) -> result<fields, header-error>;
      entries: func() -> list<tuple<field-name, field-value>>;
    }

    type headers = fields;

    type field-key = string;

    type field-name = field-key;

    type field-value = list<u8>;

    variant header-error {
      invalid-syntax,
      forbidden,
      immutable,
    }

    resource outgoing-response {
      constructor(headers: headers);
      set-status-code: func(status-code: status-code) -> result;
      body: func() -> result<outgoing-body>;
    }

    type status-code = u16;

    resource outgoing-body {
      write: func() -> result<output-stream>;
      finish: static func(this: outgoing-body, trailers: option<trailers>) -> result<_, error-code>;
    }

    type trailers = fields;

    record DNS-error-payload {
      rcode: option<string>,
      info-code: option<u16>,
    }

    record TLS-alert-received-payload {
      alert-id: option<u8>,
      alert-message: option<string>,
    }

    record field-size-payload {
      field-name: option<string>,
      field-size: option<u32>,
    }

    variant error-code {
      DNS-timeout,
      DNS-error(DNS-error-payload),
      destination-not-found,
      destination-unavailable,
      destination-IP-prohibited,
      destination-IP-unroutable,
      connection-refused,
      connection-terminated,
      connection-timeout,
      connection-read-timeout,
      connection-write-timeout,
      connection-limit-reached,
      TLS-protocol-error,
      TLS-certificate-error,
      TLS-alert-received(TLS-alert-received-payload),
      HTTP-request-denied,
      HTTP-request-length-required,
      HTTP-request-body-size(option<u64>),
      HTTP-request-method-invalid,
      HTTP-request-URI-invalid,
      HTTP-request-URI-too-long,
      HTTP-request-header-section-size(option<u32>),
      HTTP-request-header-size(option<field-size-payload>),
      HTTP-request-trailer-section-size(option<u32>),
      HTTP-request-trailer-size(field-size-payload),
      HTTP-response-incomplete,
      HTTP-response-header-section-size(option<u32>),
      HTTP-response-header-size(field-size-payload),
      HTTP-response-body-size(option<u64>),
      HTTP-response-trailer-section-size(option<u32>),
      HTTP-response-trailer-size(field-size-payload),
      HTTP-response-transfer-coding(option<string>),
      HTTP-response-content-coding(option<string>),
      HTTP-response-timeout,
      HTTP-upgrade-failed,
      HTTP-protocol-error,
      loop-detected,
      configuration-error,
      internal-error(option<string>),
    }

    resource response-outparam {
      set: static func(param: response-outparam, response: result<outgoing-response, error-code>);
    }
  }
}


package wasi:cli@0.2.6 {
  interface environment {
    get-environment: func() -> list<tuple<string, string>>;
  }
  interface exit {
    exit: func(status: result);
  }
  interface stdout {
    use wasi:io/streams@0.2.6.{output-stream};

    get-stdout: func() -> output-stream;
  }
  interface stderr {
    use wasi:io/streams@0.2.6.{output-stream};

    get-stderr: func() -> output-stream;
  }
}


package wasi:random@0.2.6 {
  interface insecure-seed {
    insecure-seed: func() -> tuple<u64, u64>;
  }
}


package wasi:http@0.2.2 {
  interface incoming-handler {
    use wasi:http/types@0.2.4.{incoming-request, response-outparam};

    handle: func(request: incoming-request, response-out: response-outparam);
  }
}
