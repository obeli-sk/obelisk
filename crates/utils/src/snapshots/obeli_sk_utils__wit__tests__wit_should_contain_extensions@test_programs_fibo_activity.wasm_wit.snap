---
source: crates/utils/src/wit.rs
expression: wit
---
package root:component;

world root {
  import wasi:io/error@0.2.6;
  import wasi:io/streams@0.2.6;
  import wasi:cli/environment@0.2.6;
  import wasi:cli/exit@0.2.6;
  import wasi:cli/stderr@0.2.6;

  export testing:fibo/fibo;
  export testing:fibo-obelisk-ext/fibo;
  export testing:fibo-obelisk-schedule/fibo;
}
package obelisk:types@3.0.0 {
  @since(version = 3.0.0)
  interface time {
    @since(version = 3.0.0)
    variant duration {
      milliseconds(u64),
      seconds(u64),
      minutes(u32),
      hours(u32),
      days(u32),
    }

    /// A time and date in seconds plus nanoseconds.
    /// Extracted from wasi:clocks@0.2.0 to avoid dependency on wasi:io
    @since(version = 3.0.0)
    record datetime {
      seconds: u64,
      nanoseconds: u32,
    }

    @since(version = 3.0.0)
    variant schedule-at {
      now,
      at(datetime),
      in(duration),
    }
  }
  @since(version = 3.0.0)
  interface execution {
    /// Join set resouce.
    @since(version = 3.0.0)
    resource join-set {
      @since(version = 3.0.0)
      id: func() -> string;
    }

    @since(version = 3.0.0)
    record execution-id {
      id: string,
    }

    @since(version = 3.0.0)
    record delay-id {
      id: string,
    }

    @since(version = 3.0.0)
    record function {
      /// `namespace:pkg_name/ifc_name` or `namespace:pkg_name/ifc_name@version`
      interface-name: string,
      function-name: string,
    }

    @since(version = 3.0.0)
    variant response-id {
      execution-id(execution-id),
      delay-id(delay-id),
    }

    @since(version = 3.0.0)
    record function-mismatch {
      /// Workflow requested function
      specified-function: function,
      /// What was found actually during execution. None if delay was found as next unprocessed response.
      actual-function: option<function>,
      actual-id: response-id,
    }

    /// Error that is thrown by `-await-next` extension functions.
    @since(version = 3.0.0)
    variant await-next-extension-error {
      /// All submitted requests and their responses of specified function and join set were already processed.
      all-processed,
      /// Execution response was awaited and marked as processed, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions or delay requests.
      function-mismatch(function-mismatch),
    }

    /// Error variants that may occur when calling `-get` extension functions.
    @since(version = 3.0.0)
    variant get-extension-error {
      /// Execution is found in processed responses, but it belongs to a different function.
      /// This can happen when join set contains responses of multiple functions.
      function-mismatch(function-mismatch),
      /// Processed responses do not contain the specified execution ID.
      /// This can happen if the execution was not marked as processed (awaited), or
      /// the execution ID does not belong to the specified join set.
      not-found-in-processed-responses,
    }

    /// Error variants that may occur when calling `-invoke` extension functions.
    @since(version = 3.0.0)
    variant invoke-extension-error {
      invalid-name(string),
    }

    /// Error variants that may occur when calling `-stub` extension functions.
    @since(version = 3.0.0)
    variant stub-error {
      /// Conflict can happen when a second writer attempts to stub a value, while the
      /// value is not equal to the already stubbed value.
      conflict,
    }
  }
}


package wasi:io@0.2.6 {
  interface error {
    resource error {
      to-debug-string: func() -> string;
    }
  }
  interface streams {
    use error.{error};

    resource output-stream {
      blocking-write-and-flush: func(contents: list<u8>) -> result<_, stream-error>;
    }

    variant stream-error {
      last-operation-failed(error),
      closed,
    }
  }
}


package wasi:cli@0.2.6 {
  interface environment {
    get-environment: func() -> list<tuple<string, string>>;
  }
  interface exit {
    exit: func(status: result);
  }
  interface stderr {
    use wasi:io/streams@0.2.6.{output-stream};

    get-stderr: func() -> output-stream;
  }
}


package testing:fibo {
  interface fibo {
    fibo: func(n: u8) -> result<u64>;
  }
}


package testing:fibo-obelisk-ext {
  interface fibo {
    use obelisk:types/execution@3.0.0.{execution-id, join-set, await-next-extension-error, get-extension-error, invoke-extension-error};

    fibo-submit: func(join-set: borrow<join-set>, n: u8) -> execution-id;

    fibo-await-next: func(join-set: borrow<join-set>) -> result<tuple<execution-id, result<u64>>, await-next-extension-error>;

    fibo-get: func(execution-id: execution-id) -> result<result<u64>, get-extension-error>;

    fibo-invoke: func(label: string, n: u8) -> result<result<u64>, invoke-extension-error>;
  }
}


package testing:fibo-obelisk-schedule {
  interface fibo {
    use obelisk:types/execution@3.0.0.{execution-id};
    use obelisk:types/time@3.0.0.{schedule-at};

    fibo-schedule: func(schedule-at: schedule-at, n: u8) -> execution-id;
  }
}
