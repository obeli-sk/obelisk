---
source: crates/utils/src/wasm_tools.rs
expression: snapshot
---
testing:fibo-workflow-obelisk-ext
/// Generated by Obelisk
package testing:fibo-workflow-obelisk-ext;

interface workflow {
  use obelisk:types/execution@2.0.0.{execution-id, join-set-id, await-next-extension-error, get-extension-error};

  fibow-submit: func(join-set-id: borrow<join-set-id>, n: u8, iterations: u32) -> execution-id;

  fibow-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, await-next-extension-error>;

  fibow-get: func(execution-id: execution-id) -> result<u64, get-extension-error>;

  fiboa-submit: func(join-set-id: borrow<join-set-id>, n: u8, iterations: u32) -> execution-id;

  fiboa-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, await-next-extension-error>;

  fiboa-get: func(execution-id: execution-id) -> result<u64, get-extension-error>;

  fiboa-concurrent-submit: func(join-set-id: borrow<join-set-id>, n: u8, iterations: u32) -> execution-id;

  fiboa-concurrent-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, await-next-extension-error>;

  fiboa-concurrent-get: func(execution-id: execution-id) -> result<u64, get-extension-error>;
}

interface workflow-nesting {
  use obelisk:types/execution@2.0.0.{execution-id, join-set-id, await-next-extension-error, get-extension-error};

  fibo-nested-workflow-submit: func(join-set-id: borrow<join-set-id>, n: u8) -> execution-id;

  fibo-nested-workflow-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, await-next-extension-error>;

  fibo-nested-workflow-get: func(execution-id: execution-id) -> result<u64, get-extension-error>;

  fibo-start-fiboas-submit: func(join-set-id: borrow<join-set-id>, n: u8, fiboas: u32, iterations-per-fiboa: u32) -> execution-id;

  fibo-start-fiboas-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, await-next-extension-error>;

  fibo-start-fiboas-get: func(execution-id: execution-id) -> result<u64, get-extension-error>;
}



testing:fibo-workflow-obelisk-schedule
package testing:fibo-workflow-obelisk-schedule;

interface workflow-nesting {
  use obelisk:types/execution@2.0.0.{execution-id};
  use obelisk:types/time@2.0.0.{schedule-at};

  fibo-nested-workflow-schedule: func(schedule-at: schedule-at, n: u8) -> execution-id;

  fibo-start-fiboas-schedule: func(schedule-at: schedule-at, n: u8, fiboas: u32, iterations-per-fiboa: u32) -> execution-id;
}

interface workflow {
  use obelisk:types/execution@2.0.0.{execution-id};
  use obelisk:types/time@2.0.0.{schedule-at};

  fibow-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;

  fiboa-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;

  fiboa-concurrent-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;
}
