---
source: crates/utils/src/wit.rs
expression: wit
---
package root:component;

world root {
  import obelisk:types/execution@2.0.0;
  import obelisk:workflow/workflow-support@2.0.0;
  import testing:fibo-obelisk-ext/fibo;
  import testing:fibo-workflow-obelisk-ext/workflow;
  import testing:fibo-workflow/workflow-nesting;
  import testing:fibo/fibo;

  export testing:fibo-workflow/workflow-nesting;
  export testing:fibo-workflow/workflow;
}
package obelisk:types@2.0.0 {
  interface time {
    variant duration {
      milliseconds(u64),
      seconds(u64),
      minutes(u32),
      hours(u32),
      days(u32),
    }

    /// A time and date in seconds plus nanoseconds.
    /// Extracted from wasi:clocks@0.2.0 to avoid dependency on wasi:io
    record datetime {
      seconds: u64,
      nanoseconds: u32,
    }

    variant schedule-at {
      now,
      at(datetime),
      in(duration),
    }
  }
  interface execution {
    resource join-set-id {
      id: func() -> string;
    }

    record execution-id {
      id: string,
    }

    record delay-id {
      id: string,
    }

    record execution-failed {
      execution-id: execution-id,
    }

    record function-mismatch {
      execution-id: execution-id,
    }

    variant execution-error {
      execution-failed(execution-failed),
      /// Mismatch between extension function (-await-next, -get) and the actual execution result.
      /// This can happen when join set contains responses of multiple functions or delay requests.
      function-mismatch(function-mismatch),
    }

    variant stub-error {
      /// stubbed execution must not contain any execution log entries except for the `Created` event.
      conflict,
    }
  }
}


package obelisk:workflow@2.0.0 {
  interface workflow-support {
    use obelisk:types/execution@2.0.0.{join-set-id};

    enum closing-strategy {
      complete,
    }

    new-join-set-generated: func(closing-strategy: closing-strategy) -> join-set-id;
  }
}


package testing:fibo-obelisk-ext {
  interface fibo {
    use obelisk:types/execution@2.0.0.{join-set-id, execution-id, execution-error};

    fibo-submit: func(join-set-id: borrow<join-set-id>, n: u8) -> execution-id;

    fibo-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, execution-error>;
  }
}


package testing:fibo-workflow-obelisk-ext {
  interface workflow {
    use obelisk:types/execution@2.0.0.{execution-id, join-set-id};
    use obelisk:types/time@2.0.0.{schedule-at};
    use obelisk:types/execution@2.0.0.{execution-error};

    fibow-submit: func(join-set-id: borrow<join-set-id>, n: u8, iterations: u32) -> execution-id;

    fibow-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, execution-error>;

    fibow-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;

    fiboa-submit: func(join-set-id: borrow<join-set-id>, n: u8, iterations: u32) -> execution-id;

    fiboa-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, execution-error>;

    fiboa-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;

    fiboa-concurrent-submit: func(join-set-id: borrow<join-set-id>, n: u8, iterations: u32) -> execution-id;

    fiboa-concurrent-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, execution-error>;

    fiboa-concurrent-schedule: func(schedule-at: schedule-at, n: u8, iterations: u32) -> execution-id;
  }
  interface workflow-nesting {
    use obelisk:types/execution@2.0.0.{execution-id, join-set-id};
    use obelisk:types/time@2.0.0.{schedule-at};
    use obelisk:types/execution@2.0.0.{execution-error};

    fibo-nested-workflow-submit: func(join-set-id: borrow<join-set-id>, n: u8) -> execution-id;

    fibo-nested-workflow-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, execution-error>;

    fibo-nested-workflow-schedule: func(schedule-at: schedule-at, n: u8) -> execution-id;

    fibo-start-fiboas-submit: func(join-set-id: borrow<join-set-id>, n: u8, fiboas: u32, iterations-per-fiboa: u32) -> execution-id;

    fibo-start-fiboas-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id, u64>, execution-error>;

    fibo-start-fiboas-schedule: func(schedule-at: schedule-at, n: u8, fiboas: u32, iterations-per-fiboa: u32) -> execution-id;
  }
}


package testing:fibo-workflow {
  interface workflow-nesting {
    fibo-nested-workflow: func(n: u8) -> u64;

    fibo-start-fiboas: func(n: u8, fiboas: u32, iterations-per-fiboa: u32) -> u64;
  }
  interface workflow {
    fibow: func(n: u8, iterations: u32) -> u64;

    fiboa: func(n: u8, iterations: u32) -> u64;

    fiboa-concurrent: func(n: u8, iterations: u32) -> u64;
  }
}


package testing:fibo {
  interface fibo {
    fibo: func(n: u8) -> u64;
  }
}
